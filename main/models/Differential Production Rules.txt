RGF: FUNCTION -> (PLUS (FUNCTION, FUNCTION))
D: (PLUS (f, g)) -> (PLUS ((D f), (D g)))

RGF: FUNCTION -> (MINUS (FUNCTION, FUNCTION))
D: (MINUS (f, g)) -> (MINUS ((D f), (D g)))

RGF: FUNCTION -> (TIMES (FUNCTION, FUNCTION))
D: (TIMES (f, g)) -> (PLUS ((TIMES ((D f), g)), (TIMES (f, (D g)))))

RGF: FUNCTION -> (DIVIDE (FUNCTION, FUNCTION))
D: (DIVIDE (f, g)) -> (DIVIDE ((MINUS ((TIMES ((D f), g)), (TIMES (f, D g)))), (POWER (g, 2))))

RGF: FUNCTION -> (POWER (FUNCTION, CONST))
D: (POWER (f, c)) -> (TIMES (c, (POWER (f, c-1))))

RGF: FUNCTION -> (POWER (FUNCTION, FUNCTION))
D: (POWER (f, g)) -> (TIMES ((POWER (f, g)), (PLUS ((TIMES (g, (DIVIDE ((D f), f)))), (TIMES ((LN (f)), (D g)))))))

RGF: FUNCTION -> (COMPOSE (FUNCTION, FUNCTION))
D: (COMPOSE (f, g)) -> (TIMES ((COMPOSE ((D f), g)), (D g)))

RGF: FUNCTION -> CONST
D: c -> 0

RGF: FUNCTION -> (TIMES (CONST, x))
D: (TIMES (c, x)) -> c

RGF: FUNCTION -> (SIN (x))
D: (SIN (x)) -> (COS (x))

RGF: FUNCTION -> (COS (x))
D: (COS (x)) -> (TIMES (-1, (SIN (x))))

RGF: FUNCTION -> (TAN (x))
D: (TAN (x)) -> (POWER ((SEC (x)), 2))

RGF: FUNCTION -> (SEC (x))
D: (SEC (x)) -> (TIMES ((SEC (x)), (TAN (X))))

RGF: FUNCTION -> (CSC (x))
D: (CSC (x)) -> (TIMES (-1, (TIMES ((CSC (x)), (COT (x))))))

RGF: FUNCTION -> (COT (x))
D: (COT (x)) -> (TIMES (-1, (POWER ((CSC (x)), 2))))

RGF: FUNCTION -> (EXP (x))
D: (EXP (x)) -> (EXP (x))

RGF: FUNCTION -> (LN (x))
D: (LN (x)) -> (DIVIDE (1, x))

//Six more inverse trig, six more hyperbolic, add weights

//There should also be a final pass to simplify out at only a basic level. Eliminate multiplying by 1, eliminate adding 0, zero out multiplying by 0, etc.
